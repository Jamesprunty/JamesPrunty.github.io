Stack like a stack of books, last in first out method. (such as an array)

push - put on top
pop - Take The top item off
peek - display the top item
length - get length

-------------------------------------------------------------------------------------------------------

Set: Similar to stack but has no duplicates and are not in any particular order (var setA = new Set():)

has - checks for an element. (return (collection.indexOf(element) !== -1)

values - returns collection

add - Will add to colection (but we need to make sure it is not already there) (if(!this.has(element)){collection.push(element); return true;} return false;};

remove - removes an element (same as the add we need to check if its there) (collection.splice(index,1) splice will take out the one element. (in ES6 it is called delete)

size - (this is a property, not a method)

union - The union of two sets, this will merge without any duplicates. This function will take in the new set as a param. we can just do foreach and .add() as the .add() already does not add if its a duplicate.

intersection - creates an intersection set as a new set. It checks if the other set has the value, if it does, add to the new set.

Difference - This is the same but with the differences

subset - Check if one set is completely contained in another set (this will return true or false) (return firstSet.every(function(value){return otherSet.has(value);}); This will go through every element at see if it passes the .has method.

-----------------------------------------

Queue: Similar to a stack but is first in first out

enqueue - Put an item on the queue (collection.push(element);)

dequeue - Remove an item (collection.shift();)

front - Put onto the front (return collection[0]) This will not remove the item

size - gets the size (collection.length)

empty - Checks if its empty (return (collection.length === 0);)

priorityqueue - you add the element, but also the priority of the element.Elements with the higher priorities go to the top of the queue.

you will be enqueueing an array (pq.enqueue(['item', 1]));

enqueue (priority) - check if its empty, run through each element in the queue to check the priority (for loop) we will be looking at index 1 as this is the priority.

---------------------------------------------------------------

Tree: All data points are called nodes. They are linked to a Root node that branches to additional nodes.

      A
      |
    -- --
   |     |
   B     C
   |     |
  - -   - -
 |   | |   |
 D   E F   G

You have parents and children (like a family tree).

A binary Search Tree can only have two branches per node.

Binary Search trees are ordered. Each left subtree is less than or equal to the parent node in each and every right node is greater than or equal to the parent node.

Example:

We can do this via classes, we will have a node class and a BST (Binary Search tree) class.
There will be three data properties: 

this.data = data
this.left = left
this.right = right

class BST {constructor(){this.root = null;} // this adds the root node

class node {constructor(data, left = null, right = null){this.data = data; this.left = left; this.right = right;}}

add(data){
const node = this.root; //reference to the root node
if (node === null){this.root = new Node(data); //If this is the first node, node will be null.
//So we set the root node based on the data.
return;}else{

const searchTree = function(node){ //This is the recursive function
if(data < node.data){ //If this current data is less than the node we are looking at
	if(node.left === null) { node.left = new Node(data); //If there is no left, add it
	return;
	}else if (node.left !== null){return searchTree(node.left);} //If left is not empty, rerun the function. 
else if(data > node.data){
	if(node.right === null) { node.right = new Node(data);
	return;
	}else if (node.right !== null){return searchTree(node.right);}
else { //This would be if the data is equal which we would not add.
	return null;
}
};
return searchTree(node);
}


 
finMin - Because the left is always smaller than the parent, the left most node is the lowest. 

(let current = this.root; while (current.left !== null){current = current.left;}return current.data;})

finMax - This is the same as findmin but to the right.

isPresent - This will find if something is present. (while(current)) // This means, while there is a node. Then if it is less go to the left, if more go to the right. 

Remove - This is slightly more complicated. This will take in the node and the data to look for. 

1 - Check if tree is null (if(node == null){return null;})
2 - If we have found the data we have three choices 
  a - If the node has no children (left and right is null) then return null
  b - If right is not null, return the one to the left (if(node.left == null){return node.right;})
  c - If the left is not null, return the right. 
3 - If the node has 2 children, we replace it with the most left node of the right child. 

var tempNode = node.right; //This goes down to the right
while (tempNode.left !== null){ //while there is a left node after
  tempNode = tempNode.left; // tempnode equals that left node
}

//This will continue until you get to the most left node

node.data = tempNode.data;
node.right = removeNode(node.left, data); //This will call the function again to fix the data structure
return node;

4 - If the data is less, run function on the left (else if(data < node.data){node.left = removeNode(node.left, data);return node;})
5 - If the data is more, repeat for the right
6 - Run the removeNode again in the function to remove (this.root = removeNode(this.root, data);)


Height - This is the height from the root node to the leaf node. If the tree is balanced the min and max will only differ by 1. 

Min height - The min height is the first node without 2 children



findMinHeight(node = this.root){if (node == nul){ return -1;};
let left = this.findMinHeight(node.left); //This is where it is recursive 
let right = this.findMinHeight(node.right; // At some point one of these will be negative because one will be null
if(left < right){return left + 1;}else{return right +1; };} // one will be bigger so we +1 to which ever is smaller



Max height - This is the distance to the last node

findMaxHeight(node = this.root){if (node == nul){ return -1;};
let left = this.findMaxHeight(node.left); //This is where it is recursive 
let right = this.findMaxHeight(node.right; // At some point one of these will be negative because one will be null
if(left > right){return left + 1;}else{return right +1; };}


isbalanced - It is only balanced when the difference between min and max is <= 1, this creates better efficiency when searching the tree.

(return (this.findMinHeight() >= this.findMaxHeight() -1))

Ways of searching in the tree: 

      9
      |
    -- --
   |     |
   4     17
   |     |
  - -     -
 |   |     |
 3   6     23
     | 
    - -
   |   |
   5   7

Depth First Search - This is the next three examples, it explores all the way down one branch before going down any other branch. 

inOrder - Start at the left most node and end at the right most node, so this will bring them back in ascending order. It would go all the way to 3, then 4, then 5, then 6, then 7, then 9, then 17, then 23.

inOrder(){if(this.root == null){return null;}else{
var result = new Array();

//This is the difference in code

function traverseInOrder(node){

//These lines are recursive

node.left && traverseInOrder(node.left); //Short circuit evaluation - If the first part is true (before &&) it will run the second command. So if node.left is true, run again with node.left (until you get to the left most place)
result.push(node.data);  //Then push the node.data
node.right && traverseInOrder(node.right); //then if right exists then go through the right.


}
traverseInOrder(this.root);

//This is the end of difference in code
return result;
};
}


PreOrder - This will look at the nodes first. So it will go to the left but it will log the nodes as it goes. This would log 9, then 4, then 3, then 6, then 5, then 7, then 17, then 23.

PreOrder(){if(this.root == null){return null;}else{
var result = new Array();

//This is the difference in code

function traversePreOrder(node){

//These lines are recursive and the only difference is the order these are in

result.push(node.data); 
node.left && traversePreOrder(node.left); 
node.right && traverseInOrder(node.right); 


}
traversePreOrder(this.root);

//This is the end of difference in code
return result;
};
}



PostOrder - looks at the leaf nodes before the roots. So it would start 3, then 5, then 7, then 6, then 4, then 23, then 17, then 9.

PostOrder(){if(this.root == null){return null;}else{
var result = new Array();

//This is the difference in code

function traversePostOrder(node){

//These lines are recursive and the only difference is the order these are in

node.left && traversePreOrder(node.left); 
node.right && traverseInOrder(node.right); 
result.push(node.data); 




}
traversePostOrder(this.root);

//This is the end of difference in code
return result;
};
}

The only difference in the way that these are run is the order of the three lines of code.



LevelOrder - This is called a Bredth search First which explores all the nodes in a given leven within a tree before continuing the next level up. So it would start 9, then 4, then 17, then 3, then 6, then 23, then 5, then 7.

levelOrder(){
	let result = [];
	let Q = [];
	if(this.root != null){
		Q.push(this.root); //Put the root in the queue
		while(Q.length > 0){ //This will continue until it has added all the elements in the tree
			let node = Q.shift(); //Pull the first item in the queue, this also then becomes the new "root node" that it moves down from. Because this takes the first ones of and not the last ones. while 3 and 6 were added to the array, 17 was added first and so it will go through that next.
			result.push(node.data); //Push the node data into the result (this would be 9 in the example
			if (node.left !- null){
				Q.push(node.left);}; //Push in the left node
			if (node.right != null){
				Q.push(node.right);
			};
		};
		return result;
	}else{
		return null;
	};
};
}
	


-----------------------------------------------------------------------------------------------------

Hash Table - Implement associative arrays or mappings of key value pairs, this is a common way of implementing map data structures or objects.

It takes in a key imput and then runs it through a hash function. A hash function just maps strings to numbers and usually the numbers just correspond to indexes in an array.

Most languages have hash tables (such as js objects) so we usually will not have to create them from scratch.  

//hash function//

var hash = (string, max) => { //We pass in the string we want to hash and the max, which is the number of buckets we are using in the hash table to store values.
	var hash = 0;
	for(var i = 0; i<string.length;i++){
		hash += string.charCodeAt(i); //add the charcode of each character
	}
	return hash % max; //deivide by the number of buckets and keep the remainder, this will be the index it goes to. 
};

let hashTable = function(){

let storage = []; //Store the data
const storagelimit = 4; //The storage limit (amount of buckets) (This is usually a lot more than 4)

//Main functions//

//ADD//

this.add = function(key, value){ //we add a key and a value
var index = hash(key, storagelimit); // find out the index of the array by running it through the hash function.

if (storage[index] === undefined) { //If that index is undefined (as in, nothing is there)
	storage[index] = [[key,value]]; //Add in the key value pair
} else {
	var inserted = false; //Set inserted to false
	for(var i =0; i < storage[index].length; i++){ //go through all the storage indexes
		if (storage[index][i][0] === key) { //See if the key exists
			storage[index][i][1] = value; //If it does, set the new value
			inserted = true;
		}
	}
	if (inserted === false){ //If the key does not exist, inserted will still be false
		storage[index].push([key, value]); //push in the new item. Here we will get multiple entries into one bucket. 
	}
}
};


//Remove//

this.remove = function(key){ //Pass in the key
	var index = hash(key, storageLimit); // get the index with the hash
	if(storage[index].length === 1 && storage[index][0][0] === key){ //if there is only one thing in the bucket and it matches the key.
		delete storage[index];
	}else{
		for(var i = 0; i<storage[index].length;i++){
			if(storage[index][i][0] === key) {//Go through the storage and look for the key, if it is the same, delete it. The "0" index is the key, the "1" index is the value.
				delete storage[index][i];
			}
		}
	}
};

//LOOKUP//


this.lookup = fucntion(key){
	var index = hash(key,storageLimit); //This will give you the index (bucket) but there might be multiple items in that bucket. 
	if(storage[index] === undefined){
		return undefined; // The item is not in the hash table. 
	}else{
		for(var i = 0; i<storage[index].length;i++){ //Go through the bucket
			if(storage[index][i][0] === key){ //If you find the key
				return storage [index][i][1]; //Return the element
			}
		}
	}
};





The hash table will look something like this (if the bucket size was 4):

[undefined, [["sam", "person"], ["jerry", "penguin"]], [["fido", "dog"]], [["john", "cow"]]

We have run the hash indexing 4 times. (ht.add()) 

The hash returned "1" twice, 2,3,4 once, and "0" no times. 
As we can see there are two things stored in the "1" bucket. 
If we run ht.lookup('jerry') it would return "penguin".
If we then increase the hash table to 14, the buckets would sort themselves out to only have 1 in each bucket. 



======================================================================================================

Linked List

 A linked list is a structure where elements are stored in a node, the node contains two key pieces of info: 

1 - The element itself
2 - The referece to the next node

Linked list is dynamic while Arrays are fixed, they also have efficient insertions and deletions unlick Arrays. However arrays have random access, whereas link lists dont. You can jump to index 5 on an array, but you have to go one by one in a linked list.

Every linked list has a head which is the fist node, and the size. 

Head -> 1(info)|Link -> 2(info)|link -> 3(info)|link -> null(end)

//LinkedList//

function linkedList(){
	var length = 0; //It has not length as we are just establishing it
	var head  = null; //Head is null as it has no data

	var Node = function(element){ //We pass in an element
		this.element = element; //This sets the info
		this.next = null; //This sets the next link to null
	};

	this.size = function(){
		return length;
	};

	this.head = function(){
		return head;
	};

//ADD//
	
	this.add = function(element){
		var node = new Node(element); //Run the node function with the element param
		if(head === null){
			head = node; //If there is nothing so far, make head the node
		}else{
			var currentNode = head; //start at the head
			while(currentNode.next){ //While there is a "next" move on
				currentNode = currentNode.next;
			}
			currentNode.next = node; //Add the node to the next space
		}

		length++ //add 1 to the length
	};



//REMOVE//

	this.remove = function(element){
		var currentNode = head; //Start at the head
		var previousNode; //Will help us once we have remove the node we want to remove
		if(currentNode.element === element){
			head = currentNode.next; //if the head is the current node, move the head forward one which will remove it (as you always start from the head)
		}else{
			while(currentNode.element !== element){ //While it is not the element
				previousNode = currentNode; //Move up one
				currentNode = currentNode.next; //Move up one
			}

			previousNode.next = currentNode.next; //If it is found, previous.next = current.next, removing the current node.
		}

		length--; //shorten length
	};


//Empty//

	this.isEmpty = function() {
		return length === 0;
	};


//IndexOf//

	this.indexOf = function(element){
		var currentNode = head;
		var index = -1; //Start the indexing

		while(currentNode){ //while there is a current node
			index++; //increment the index, so at this point it is now 0 where we want to be.
			if(currentNode.element === element){
				return index;
			}
			currentNode = currentNode.next;
		}

		return -1; //If it never finds it
	};


//ElementAt//

	this.elementAt = function(index) {
		var currentNode = head;
		var count = 0;
		while(count < index){
			count++;
			currentNode = currentNode.next
		}
		return currentNode.element;
	};



//addAt//

	this.addAt = function(index, element){
		var node = new Node(element); //Add node with the element
		var currentNode = head;
		var previousNode;
		var currentIndex = 0;

		if(index > length){ //If what you are trying to add it too is too large
			return false;
		}

		if(index === 0){ //If you want to add at the beginning
			node.next = currentNode; //Add head to "node.next"
			head = node; // Make head the node.
		}else{
			while(currentIndex < index){
				currentIndex++;
				previousNode = currentNode;
				currentNode = currentNode.next;
			}

		node.next = currentNode; //Add the current node as the next node
		previousNode.next = node; // Link the previous node to the new node
		}

		length++
	}

//removeAt//

	this.removeAt = function(index){
		var currentNode = head;
		var previousNode;
		var currentIndex = 0;
		if(index< 0 || index >= length){if the index is smaller than 0 or its bigger than or equal to the length
			return null;
		}
		if(index === 0){
			head = currentNode.next;
		}else {
			while(currentIndex < index){
				currentIndex++;
				previousNode = currentNode;
				currentNode = currentNode.next;
			}
			previousNode.next = currentNode.next
		}
		length--;
		return currentNode.element; //Return the element removed
		}
	}

}

example code
var conga = new LinkedList();
conga.add('dog');




======================================================================================================

Trie data Structure (Prefix tree)

Stores associative data structures, it stores data in steps, each step is a node in the trie.

Usually stores words as there are a finite combinations, ie validate a word is in a dictionary.

					0
					|
				-----------------
				b       d       s
				|	|	|
			---------------------------------
			|	|	|	|	|
			a	e	o*	e	a
			|	|	|	|	|
		-----------------------------------------------
		l	t*	t*	l	t*	t*	l
		|	|	|	|	|	|	|
		l*		s*	l*			t*


In the example, both, "bat" and "ball" start with "ba" so they go down the same path, when you reach the end of a word, it will add a "*" to signify. So in "doll", "do" is also a word so there is a star by both. 


let Node = function(){
	this.keys = new Map(); //Creates a new map which has key value pairs, like the name of a folder and the folder. The key is the name of the folder, and the value will be what is in the folder.
	this.end = false; 
	this.setEnd = function(){this.end = true;}; //set the end of a word
	this.isEnd = function(){return this.end;}; //see if it is true
};

let trie = function(){

this.root = new Node(); //create root


//ADD//


this.add = function(input, node = this.root){ //The first time you will put the full word in. If you pass in a node, it will use that, but otherwise it will use the root
	if(input.length == 0){ //if we are at the end of the word we put in
		node.setEnd();//Set it to the end
		return;
	}else if (!node.keys.has(input[0])){ //Check if there is a node with the letter we are looking at. node.keys is all the letters that the root node points to. "input[0]" just means the first character.
		node.keys.set(input[0], new Node()); //Create a node of that letter, the name of the folder is the letter and the contents is the "new node".
		return this.add(input.substr(1),node.keys.get(input[0])); //This takes everything after the first letter, and runs it through the add function. Instead of using the default root node, we are passing in the node we have just created to follow along that path. 

	}else{
		return this.add(input.substr(1), node.keys.get(input[0])); //This is the same as the previous else function but it doesn't add the letter in as it is already there. 
	};
};
	

//isWord//


this.isWord = function(word){
	let node = this.root; //Start at the beginning
	while (word.length > 1){ //while there are more characters to search.
		if(!node.keys.has(word[0])){ //Check the first character If the letter node is not there
			return false; 	
		}else{
			node = node.keys.get(word[0]); //change the node from the root node to the node that fits the first character. 
			word = word.substr(1); //Word now equals the word minus the letter so the word will get smaller. 
		};
	};
	return (node.keys.has(word) && node.keys.get(word).isEnd()) ? true : false;
};
		


//print//


this.print = function(){
	let words = new Array(); //This will be the array with every word in.
	let search = function(node, string) { //pass in a node and string
		if(node.keys.size !- 0){ //If there are still more letters to look through
		for (let letter of node.keys.keys()){ //for each key
			search(node.keys.get(letter), string.concat(letter)); //run the search command again. Passing in the node at the letter, and add that letter to the string. It will keep pushing until it has formed the whole word.
		};
		if (node.isEnd()) { //If you have reached the end of a word
			words.push(string); //Push the string to the array
		};
		}else{ //This else is to the check if there is a key in the node, this would mean we have hit the end of the branch
			string.length > 0 ? words.push(string) : undefined;
			return;
		};
	};
	search(this.root, new String()); //This is the function to call for the first time
	return words.length > 0 ? words : null; //Check if there are any words, return the array or null.

	};
};



====================================================================================================

//HEAP//

A Binary Heap is a partially ordered binary tree which satisfies the heap property.

The heap property indicates a specific relationship between the parent and child nodes. 

You may have a max heap where all the parent nodes are bigger or the same as than the child nodes, or a min heap where the children are all bigger.

binary heaps are also binary trees which means they fill from left to right.

Heaps can be set as binary tree structures, but are more often implemented as arrays.

When working with a heap you start from 1, leave 0 as null. 

This is the tree structure:


    20 (1)
      |
    -- --
   |     |
 19 (2) 17 (3)
   |     |
  - -     -
 |   |     |
13(4)15(5) 8(6)
     | 
    - -
   |   |
  10(7)5(8)

This is the structure as an array:

Data: 20, 19, 17, 13, 15, 8, 10, 5
Number: 1, 2, 3, 4, 5, 6, 7, 8

1 being the root, and 8 being the heap size.

You can find the left and right child from the array representation with the following equasions: 

Left Child: i * 2
right Child: i * 2 + 1
parent: i/2 (rounded down)

So, 19 is on index 2, if we double it we get 4, which is 13. Add one and we get 5 which is 15 (the right child)

This is for a maxHeap. The code below is for a minHeap. 

It will build the tree on level order, it then checks the position and moves it to the correct position to make sure that the children are always higher or lower depending on the heap. 

//minHeap//

let minHeap = function(){

	let heap = [null]; //Starts out null

	this.insert = function(num){ //take in a number
		heap.push(num); //Put the number in the heap at the end








TIME: 1:34:40










 

